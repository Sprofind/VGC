
spring.datasource.url = jdbc:mysql://localhost:3306/VGV
spring.datasource.username=root
spring.datasource.password=123456
spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.jpa.properties.hibernate.dialect=org.hibernate.dialect.MySQL5Dialect
spring.jpa.hibernate.ddl-auto=none
spring.jackson.serialization.fail-on-empty-beans=false
spring.jpa.properties.hibernate.globally_quoted_identifiers=true
#HikariConfig config = new HikariConfig();
#
#
#config.setJdbcUrl(String.format("jdbc:mysql:///%s", DB_NAME));
#config.setUsername(DB_USER); // e.g. "root", "postgres"
#config.setPassword(DB_PASS); // e.g. "my-password"
#
#// For Java users, the Cloud SQL JDBC Socket Factory can provide authenticated connections.
#// See https://github.com/GoogleCloudPlatform/cloud-sql-jdbc-socket-factory for details.
#config.addDataSourceProperty("socketFactory", "com.google.cloud.sql.mysql.SocketFactory");
#config.addDataSourceProperty("cloudSqlInstance", CLOUD_SQL_CONNECTION_NAME);
#config.addDataSourceProperty("useSSL", "false");
#
#// ... Specify additional connection properties here.
#// ...
#
#// Initialize the connection pool using the configuration object.
#DataSource pool = new HikariDataSource(config);
#spring.cloud.gcp.projectId=vgv-backend
#spring.cloud.gcp.sql.instance-connection-name=vgv-backend:asia-northeast1:root
#spring.cloud.gcp.sql.database-name=VGV
#
#
#
#spring.cloud.gcp.sql.userName=root
#spring.cloud.gcp.sql.password=123456
#spring.jpa.properties.hibernate.globally_quoted_identifiers=true
#spring.jpa.hibernate.ddl-auto=create-drop
#spring.cloud.gcp.project-id=vgv-backend
#spring.cloud.gcp.sql.instance-connection-name=vgv-backend:asia-northeast1:root
#spring.cloud.gcp.sql.database-name=VGV
#spring.cloud.gcp.sql.userName=root
#spring.cloud.gcp.sql.password=123456
#spring.jpa.properties.hibernate.globally_quoted_identifiers=true
jwt.secret=VID2019